{"version":3,"sources":["../../server/controllers/signup.js"],"names":["require","getSingleUser","getUsersCount","addUser","Users","replacerJson","signup","req","res","errorMessage","body","email","fname","lname","address","country","status","send","message","user","newUser","password","data","JSON","stringify","module","exports"],"mappings":";;AAAA;eACkDA,OAAO,CAAC,sBAAD,C;IAAjDC,a,YAAAA,a;IAAeC,a,YAAAA,a;IAAeC,O,YAAAA,O;;gBACpBH,OAAO,CAAC,kBAAD,C;IAAjBI,K,aAAAA,K;;AACR,IAAMC,YAAY,GAAGL,OAAO,CAAC,qBAAD,CAA5B,C,CAEA;;;AACA,SAASM,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACxB,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAI,CAACF,GAAG,CAACG,IAAJ,CAASC,KAAd,EAAqBF,YAAY,GAAG,sBAAf,CAArB,KACK,IAAI,CAACF,GAAG,CAACG,IAAJ,CAASE,KAAd,EAAoBH,YAAY,GAAG,+BAAf,CAApB,KACA,IAAI,CAACF,GAAG,CAACG,IAAJ,CAASG,KAAd,EAAoBJ,YAAY,GAAG,8BAAf,CAApB,KACA,IAAI,CAACF,GAAG,CAACG,IAAJ,CAASI,OAAd,EAAsBL,YAAY,GAAG,4BAAf,CAAtB,KACA,IAAI,CAACF,GAAG,CAACG,IAAJ,CAASK,OAAd,EAAsBN,YAAY,GAAG,4BAAf;;AAC3B,MAAIA,YAAJ,EAAkB;AAChBD,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBE,MAAAA,OAAO,EAAET;AAFU,KAArB;AAID,GALD,MAKO;AACL,QAAMU,IAAI,GAAGlB,aAAa,CAACM,GAAG,CAACG,IAAJ,CAASC,KAAV,CAA1B;;AACA,QAAI,CAACQ,IAAI,CAAC,CAAD,CAAT,EAAc;AACZ,UAAMC,OAAO,GAAG,IAAIhB,KAAJ,CAAUF,aAAV,EAAyBK,GAAG,CAACG,IAAJ,CAASC,KAAlC,EAAyCJ,GAAG,CAACG,IAAJ,CAASE,KAAlD,EACdL,GAAG,CAACG,IAAJ,CAASG,KADK,EACEN,GAAG,CAACG,IAAJ,CAASW,QADX,EACqBd,GAAG,CAACG,IAAJ,CAASI,OAD9B,EACuCP,GAAG,CAACG,IAAJ,CAASK,OADhD,EACyD,YADzD,EACuE,KADvE,CAAhB;AAEAZ,MAAAA,OAAO,CAACiB,OAAD,CAAP;AACAZ,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,GADW;AAEnBM,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAevB,aAAa,CAACmB,OAAO,CAACT,KAAT,CAAb,CAA6B,CAA7B,CAAf,EAAgDN,YAAhD;AAFa,OAArB;AAID,KARD,MAQO;AACLG,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,GADW;AAEnBE,QAAAA,OAAO,EAAE;AAFU,OAArB;AAID;AACF;;AACD,SAAOV,GAAP;AACD;;AACDiB,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["/* eslint-disable linebreak-style */\r\nconst { getSingleUser, getUsersCount, addUser } = require('../helper/userHelper');\r\nconst { Users } = require('../models/users1');\r\nconst replacerJson = require('../helper/indexH.js');\r\n\r\n// Parse incoming requests data\r\nfunction signup(req, res) {\r\n  let errorMessage = '';\r\n  if (!req.body.email) errorMessage = 'Email is not defined';\r\n  else if (!req.body.fname)errorMessage = 'THe first name is not defined';\r\n  else if (!req.body.lname)errorMessage = 'The last name is not defined';\r\n  else if (!req.body.address)errorMessage = 'the address is not defined';\r\n  else if (!req.body.country)errorMessage = 'The country does not exist';\r\n  if (errorMessage) {\r\n    res.status(400).send({\r\n      status: 400,\r\n      message: errorMessage,\r\n    });\r\n  } else {\r\n    const user = getSingleUser(req.body.email);\r\n    if (!user[0]) {\r\n      const newUser = new Users(getUsersCount, req.body.email, req.body.fname,\r\n        req.body.lname, req.body.password, req.body.address, req.body.country, 'unverified', false);\r\n      addUser(newUser);\r\n      res.status(200).send({\r\n        status: 200,\r\n        data: JSON.stringify(getSingleUser(newUser.email)[0], replacerJson),\r\n      });\r\n    } else {\r\n      res.status(403).send({\r\n        status: 403,\r\n        message: 'This mail already exists',\r\n      });\r\n    }\r\n  }\r\n  return res;\r\n}\r\nmodule.exports = signup;\r\n"],"file":"signup.js"}