{"version":3,"sources":["../../server/controllers/repaymentController.js"],"names":["addPayment","req","res","loan","params","loanID","isRepaid","body","amount","isNaN","tenorCovered","Number","parseFloat","getPaymentInstallment","newRepayment","Repayment","loanRepaymentHelper","getRepaymentCount","Date","id","status","send","data","addNewLoanRepayment","message","getRepayments","loans","getLoanRepayment"],"mappings":";;;;;;;AAMA;;AACA;;AACA;;AARA;;AACA;;AACA;;AACA;;AACA;AAOO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAMC,IAAI,GAAG,gCAAcF,GAAG,CAACG,MAAJ,CAAWC,MAAzB,CAAb;;AACA,MAAIF,IAAJ,EAAU;AACR,QAAI,CAAEA,IAAI,CAACG,QAAL,EAAN,EAAwB;AACtB,UAAIL,GAAG,CAACM,IAAJ,CAASC,MAAT,IAAoB,CAACC,KAAK,CAACR,GAAG,CAACM,IAAJ,CAASC,MAAV,CAA9B,EAAkD;AAChD,YAAME,YAAY,GAAGC,MAAM,CAACC,UAAP,CAAkBX,GAAG,CAACM,IAAJ,CAASC,MAA3B,IAAqCL,IAAI,CAACU,qBAAL,EAA1D;AACA,YAAMC,YAAY,GAAG,IAAIC,oBAAJ,CAAcC,gCAAoBC,iBAApB,EAAd,EAAuD,IAAIC,IAAJ,EAAvD,EAAmEf,IAAI,CAACgB,EAAxE,EAA4ElB,GAAG,CAACM,IAAJ,CAASC,MAArF,CAArB;AACAN,QAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,GADW;AAEnBE,UAAAA,IAAI,EAAEN,gCAAoBO,mBAApB,CAAwCT,YAAxC;AAFa,SAArB;AAID,OAPD,MAOO;AACLZ,QAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,GADW;AAEnBI,UAAAA,OAAO,EAAE;AAFU,SAArB;AAID;AACF,KAdD,MAcO;AACLtB,MAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,QAAAA,MAAM,EAAE,GADW;AAEnBI,QAAAA,OAAO,EAAE;AAFU,OAArB;AAID;AACF,GArBD,MAqBO;AACLtB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBI,MAAAA,OAAO,EAAE;AAFU,KAArB;AAID;AACF,CA7BM;;;;AA8BA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACxB,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAMwB,KAAK,GAAGV,gCAAoBW,gBAApB,CAAqC1B,GAAG,CAACG,MAAJ,CAAWC,MAAhD,CAAd;;AACA,MAAIqB,KAAJ,EAAW;AACTxB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBE,MAAAA,IAAI,EAAEI;AAFa,KAArB;AAID,GALD,MAKO;AACLxB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,MAAAA,MAAM,EAAE,GADW;AAEnBI,MAAAA,OAAO,EAAE;AAFU,KAArB;AAID;AACF,CAbM","sourcesContent":["/* eslint-disable linebreak-style */\r\n/* eslint-disable no-restricted-globals */\r\n/* eslint-disable radix */\r\n/* eslint-disable max-len */\r\n/* eslint-disable linebreak-style */\r\n\r\nimport { getSingleLoan } from '../helper/loansHelper';\r\nimport { Repayment } from '../models/Repayment1';\r\nimport { loanRepaymentHelper } from '../helper/repaymentH';\r\n\r\n\r\nexport const addPayment = (req, res) => {\r\n  const loan = getSingleLoan(req.params.loanID);\r\n  if (loan) {\r\n    if (!(loan.isRepaid())) {\r\n      if (req.body.amount && (!isNaN(req.body.amount))) {\r\n        const tenorCovered = Number.parseFloat(req.body.amount) / loan.getPaymentInstallment();\r\n        const newRepayment = new Repayment(loanRepaymentHelper.getRepaymentCount(), new Date(), loan.id, req.body.amount);\r\n        res.status(200).send({\r\n          status: 200,\r\n          data: loanRepaymentHelper.addNewLoanRepayment(newRepayment),\r\n        });\r\n      } else {\r\n        res.status(400).send({\r\n          status: 400,\r\n          message: 'Please provide valid parameters',\r\n        });\r\n      }\r\n    } else {\r\n      res.status(401).send({\r\n        status: 401,\r\n        message: 'This loan is completly repaid',\r\n      });\r\n    }\r\n  } else {\r\n    res.status(400).send({\r\n      status: 400,\r\n      message: 'There is no loan with such an ID',\r\n    });\r\n  }\r\n};\r\nexport const getRepayments = (req, res) => {\r\n  const loans = loanRepaymentHelper.getLoanRepayment(req.params.loanID);\r\n  if (loans) {\r\n    res.status(200).send({\r\n      status: 200,\r\n      data: loans,\r\n    });\r\n  } else {\r\n    res.status(400).send({\r\n      status: 400,\r\n      message: 'Please provide a correct loan ID',\r\n    });\r\n  }\r\n};\r\n"],"file":"repaymentController.js"}